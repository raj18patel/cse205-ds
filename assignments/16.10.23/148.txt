/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    public :
  
        ListNode* sortList(ListNode* head) {
            if (head == NULL || head->next == NULL)
            return head;
                
            // step 1. cut the list to two halves
            ListNode* prev = NULL;
            ListNode* slow = head;
            ListNode* fast =head;
            
            while (fast != NULL && fast->next != NULL) {
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
            }
            
           prev->next=NULL ;
            
            // step 2. sort each half
            ListNode* l1 = sortList(head);
            ListNode* l2 = sortList(slow);
            
            // step 3. merge l1 and l2
            return merge(l1, l2);
        }
    
        ListNode* merge(ListNode* l1, ListNode* l2) {
            ListNode* l =new ListNode();
            if(l1==NULL){
                return l2;
            }
            if(l2==NULL){
                return l1;
            }
            if(l1->val < l2->val){
                l= l1;
                l->next=merge(l1->next ,l2);

            }
            else{
                l =l2;
                l->next =merge(l1, l2->next);
            }
            return l;
        }



};