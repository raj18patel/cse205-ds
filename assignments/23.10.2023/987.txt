/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
        if(root==NULL) return ans;
         map<int,map<int,vector<int>>> m;
        queue<pair<TreeNode*, pair<int,int>>> q;
        int v=0;
        int l=0;
       
        q.push({root , {l,v}});

        while(!q.empty()){
            int s =q.size();
            while(s--){
                auto t =q.front();
                q.pop();
                TreeNode* r = t.first;
                m[t.second.second][t.second.first].push_back(r->val);
                if(r->left){
                    q.push({r->left ,{t.second.first+1,t.second.second-1}});
                }
                if(r->right){
                    q.push({r->right,{t.second.first+1,t.second.second+1}});
                }
            }
        }
        for(auto i : m){
            vector<int>b;
            for(auto j:i.second){
                for(auto k :j.second){
                    b.push_back(k);
                }
            }
            ans.push_back(b);
        }
        return ans; 
            
        
    }
};